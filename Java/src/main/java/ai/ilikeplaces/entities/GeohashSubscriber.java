/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ai.ilikeplaces.entities;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GeohashSubscriber extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeohashSubscriber\",\"namespace\":\"ai.ilikeplaces.entities\",\"fields\":[{\"name\":\"emailId\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}");
  @Deprecated public java.lang.CharSequence emailId;
  @Deprecated public double latitude;
  @Deprecated public double longitude;

  /**
   * Default constructor.
   */
  public GeohashSubscriber() {}

  /**
   * All-args constructor.
   */
  public GeohashSubscriber(java.lang.CharSequence emailId, java.lang.Double latitude, java.lang.Double longitude) {
    this.emailId = emailId;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emailId;
    case 1: return latitude;
    case 2: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emailId = (java.lang.CharSequence)value$; break;
    case 1: latitude = (java.lang.Double)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emailId' field.
   */
  public java.lang.CharSequence getEmailId() {
    return emailId;
  }

  /**
   * Sets the value of the 'emailId' field.
   * @param value the value to set.
   */
  public void setEmailId(java.lang.CharSequence value) {
    this.emailId = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /** Creates a new GeohashSubscriber RecordBuilder */
  public static ai.ilikeplaces.entities.GeohashSubscriber.Builder newBuilder() {
    return new ai.ilikeplaces.entities.GeohashSubscriber.Builder();
  }
  
  /** Creates a new GeohashSubscriber RecordBuilder by copying an existing Builder */
  public static ai.ilikeplaces.entities.GeohashSubscriber.Builder newBuilder(ai.ilikeplaces.entities.GeohashSubscriber.Builder other) {
    return new ai.ilikeplaces.entities.GeohashSubscriber.Builder(other);
  }
  
  /** Creates a new GeohashSubscriber RecordBuilder by copying an existing GeohashSubscriber instance */
  public static ai.ilikeplaces.entities.GeohashSubscriber.Builder newBuilder(ai.ilikeplaces.entities.GeohashSubscriber other) {
    return new ai.ilikeplaces.entities.GeohashSubscriber.Builder(other);
  }
  
  /**
   * RecordBuilder for GeohashSubscriber instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeohashSubscriber>
    implements org.apache.avro.data.RecordBuilder<GeohashSubscriber> {

    private java.lang.CharSequence emailId;
    private double latitude;
    private double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(ai.ilikeplaces.entities.GeohashSubscriber.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ai.ilikeplaces.entities.GeohashSubscriber.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GeohashSubscriber instance */
    private Builder(ai.ilikeplaces.entities.GeohashSubscriber other) {
            super(ai.ilikeplaces.entities.GeohashSubscriber.SCHEMA$);
      if (isValidValue(fields()[0], other.emailId)) {
        this.emailId = data().deepCopy(fields()[0].schema(), other.emailId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'emailId' field */
    public java.lang.CharSequence getEmailId() {
      return emailId;
    }
    
    /** Sets the value of the 'emailId' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder setEmailId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.emailId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'emailId' field has been set */
    public boolean hasEmailId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'emailId' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder clearEmailId() {
      emailId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'latitude' field */
    public java.lang.Double getLatitude() {
      return latitude;
    }
    
    /** Sets the value of the 'latitude' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder setLatitude(double value) {
      validate(fields()[1], value);
      this.latitude = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'latitude' field has been set */
    public boolean hasLatitude() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'latitude' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder clearLatitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'longitude' field */
    public java.lang.Double getLongitude() {
      return longitude;
    }
    
    /** Sets the value of the 'longitude' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'longitude' field has been set */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'longitude' field */
    public ai.ilikeplaces.entities.GeohashSubscriber.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public GeohashSubscriber build() {
      try {
        GeohashSubscriber record = new GeohashSubscriber();
        record.emailId = fieldSetFlags()[0] ? this.emailId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.latitude = fieldSetFlags()[1] ? this.latitude : (java.lang.Double) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
